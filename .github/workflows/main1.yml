name: Full Parallel Dev + DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ðŸ”¹ Build Docker image and smoke test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: node-hello-world:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./node
          file: ./node/Dockerfile
          push: false
          tags: node-hello-world:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run container smoke test
        run: |
          docker run -d -p 3000:3000 --name node-app node-hello-world:latest
          sleep 5
          curl --fail http://localhost:3000 || exit 1
          # docker rm -f node-app
          
      - name: Save Docker image
        run: docker save node-hello-world:latest -o node-hello-world.tar

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          input: node-hello-world.tar
          format: json
          output: trivy-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json          

  # ðŸ”¹ Trivy scan (depends on build-and-test)
  trivy-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Save Docker image
        run: docker save node-hello-world:latest -o node-hello-world.tar

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          input: node-hello-world.tar
          format: json
          output: trivy-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  # ðŸ”¹ Hadolint, Dockle, SBOM (Dockerfile checks)
  docker-lint-sbom:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile with Hadolint
        run: hadolint ./node/Dockerfile | tee hadolint-report.txt
      - name: Dockle check
        run: dockle -f json -o dockle-report.json node-hello-world:latest || true
      - name: Generate SBOM
        run: syft packages docker:node-hello-world:latest -o json > sbom.json
      - name: Upload Docker reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-reports
          path: |
            hadolint-report.txt
            dockle-report.json
            sbom.json

  # ðŸ”¹ Secrets scan + npm audit
  secrets-deps-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --report-format json --report-path gitleaks-report.json
      - name: npm install
        run: cd node && npm install
      - name: npm audit
        run: cd node && npm audit --json > ../npm-audit-report.json || true
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: secrets-deps-reports
          path: |
            gitleaks-report.json
            npm-audit-report.json

  # ðŸ”¹ ESLint + Unit tests
  eslint-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ESLint
        run: cd node && npx eslint . --format json -o ../eslint-report.json || true
      - name: Unit Tests
        run: cd node && npm test -- --coverage --json --outputFile=../jest-report.json || true
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-tests-reports
          path: |
            eslint-report.json
            jest-report.json

  # ðŸ”¹ OWASP ZAP (DAST)
  zap-dast:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          cmd_options: "-I -r zap-report.html"
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  # ðŸ”¹ Checkov (IaC scan)
  checkov-iac:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        run: checkov -d . --output json > checkov-report.json || true
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-report.json

  # ðŸ”¹ CodeQL static analysis
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results
      - name: Upload CodeQL results
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: codeql-results
